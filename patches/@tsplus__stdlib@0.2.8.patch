diff --git a/_mjs/collections/Chunk/definition.mjs b/_mjs/collections/Chunk/definition.mjs
index 5c5e300e42504603d77ebcfe62c11f088833535f..1b5541b8d5878db68da138df8fd853f291c3b459 100644
--- a/_mjs/collections/Chunk/definition.mjs
+++ b/_mjs/collections/Chunk/definition.mjs
@@ -23,6 +23,8 @@ export const Chunk = {
 export function unifyChunk(self) {
   return self;
 }
+
+const customInspectSymbol = Symbol.for('nodejs.util.inspect.custom')
 /**
  * Internal base class
  */
@@ -74,6 +76,10 @@ export class ChunkInternal {
     return this._array();
   }
 
+  [customInspectSymbol](depth, inspectOptions, inspect) {
+    return this.toString();
+  }
+
   _buckets() {
     return {
       [Symbol.iterator]: () => this._arrayLikeIterator()
diff --git a/collections/Chunk/definition.js b/collections/Chunk/definition.js
index d38a07d364595b764ed19881d56c1c7800326a68..57c24953e81a657be6d00eb72ea63d621dd047f2 100644
--- a/collections/Chunk/definition.js
+++ b/collections/Chunk/definition.js
@@ -56,6 +56,8 @@ exports.Chunk = Chunk;
 function unifyChunk(self) {
   return self;
 }
+
+const customInspectSymbol = Symbol.for('nodejs.util.inspect.custom')
 /**
  * Internal base class
  */
@@ -100,6 +102,10 @@ class ChunkInternal {
     return tsplus_module_2.hashIterator(this[Symbol.iterator]());
   }
 
+  [customInspectSymbol](depth, inspectOptions, inspect) {
+    return this.toString();
+  }
+
   toString() {
     return `Chunk(${this._array().join(", ")})`;
   }
diff --git a/tsconfig.base.json b/tsconfig.base.json
new file mode 100644
index 0000000..cc7c28d
--- /dev/null
+++ b/tsconfig.base.json
@@ -0,0 +1,62 @@
+{
+    "compilerOptions": {
+        "moduleDetection": "force",
+        "composite": true,
+        "downlevelIteration": true,
+        "resolveJsonModule": true,
+        "esModuleInterop": true,
+        "declaration": true,
+        "skipLibCheck": true,
+        "emitDecoratorMetadata": true,
+        "experimentalDecorators": true,
+        "preserveSymlinks": true,
+        "moduleResolution": "node",
+        "noEmit": false,
+        "lib": [
+            "ES2021"
+        ],
+        "sourceMap": true,
+        "declarationMap": true,
+        "strict": true,
+        "noImplicitReturns": false,
+        "noUnusedLocals": true,
+        "noUnusedParameters": false,
+        "noFallthroughCasesInSwitch": true,
+        "noEmitOnError": false,
+        "noErrorTruncation": false,
+        "allowJs": false,
+        "checkJs": false,
+        "forceConsistentCasingInFileNames": true,
+        "suppressImplicitAnyIndexErrors": true,
+        "stripInternal": true,
+        "noImplicitAny": true,
+        "noImplicitThis": true,
+        "noUncheckedIndexedAccess": true,
+        "strictNullChecks": true,
+        "baseUrl": ".",
+        "target": "ES2021",
+        "module": "ES6",
+        "incremental": true,
+        "removeComments": false,
+        // "paths": {
+        //     "@effect/core": [
+        //         "./packages/core/src/index.ts"
+        //     ],
+        //     "@effect/core/test/*": [
+        //         "./packages/core/test/*"
+        //     ],
+        //     "@effect/core/examples/*": [
+        //         "./packages/core/examples/*"
+        //     ],
+        //     "@effect/core/*": [
+        //         "./packages/core/src/*"
+        //     ],
+        // }
+    },
+    "include": [],
+    "exclude": [
+        "node_modules",
+        "build",
+        "lib"
+    ]
+}
\ No newline at end of file
diff --git a/tsconfig.build.json b/tsconfig.build.json
new file mode 100644
index 0000000..148b428
--- /dev/null
+++ b/tsconfig.build.json
@@ -0,0 +1,13 @@
+{
+    "extends": "./tsconfig.base.json",
+    "compilerOptions": {
+        "outDir": "build/esm",
+        "declarationDir": "build/dts",
+        "tsBuildInfoFile": "build/tsbuildinfo/esm.tsbuildinfo",
+        "tsPlusConfig": "./tsplus.config.json",
+        "rootDir": "_src"
+    },
+    "include": [
+        "_src/**/*.ts"
+    ]
+}
\ No newline at end of file
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..597ce10
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,18 @@
+{
+  "extends": "./tsconfig.base.json",
+  "compilerOptions": {
+    "tsPlusConfig": "./tsplus.config.json",
+    "tsBuildInfoFile": "build/tsbuildinfo/tsconfig.tsbuildinfo"
+  },
+  "references": [
+    {
+      "path": "./tsconfig.build.json"
+    }
+  ],
+  "ts-node": {
+    "files": true,
+    "require": [
+      "tsconfig-paths/register"
+    ]
+  }
+}
\ No newline at end of file
diff --git a/tsplus.config.json b/tsplus.config.json
new file mode 100644
index 0000000..1f1ceb8
--- /dev/null
+++ b/tsplus.config.json
@@ -0,0 +1,11 @@
+{
+  "importMap": {
+    "^(.*)/packages/([^/]*)/src(.*)/index\\.ts$": "@effect/$2$3",
+    "^(.*)/packages/([^/]*)/src(.*)\\.ts$": "@effect/$2$3",
+    "^(.*)/packages/([^/]*)/test/(.*)\\.ts$": "@effect/$2/test/$3",
+    "^(.*)/packages/([^/]*)/examples/(.*)\\.ts$": "@effect/$2/examples/$3"
+  },
+  "traceMap": {
+    "^(.*)/packages/([^/]*)/(.*)$": "(@effect/$2) $3"
+  }
+}
