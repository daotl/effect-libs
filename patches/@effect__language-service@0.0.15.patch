diff --git a/transformer.js b/transformer.js
index d119a28427139fb3494eeeed8e23efb8a3a17925..00beb155ee3c7e23666ea072d4f33421fcbb15f1 100644
--- a/transformer.js
+++ b/transformer.js
@@ -43,11 +43,17 @@ function effectPlugin(program, options) {
         }
         function getTrace(node) {
           try {
-            const pos = getOriginal(node).getStart();
+            const original = getOriginal(node)
+            const pos = original.getStart(sourceFile);
             const nodeEnd = sourceFile.getLineAndCharacterOfPosition(pos);
             return ctx.factory.createBinaryExpression(fileName.get, ctx.factory.createToken(_typescript.default.SyntaxKind.PlusToken), ctx.factory.createStringLiteral(`:${nodeEnd.line + 1}:${nodeEnd.character + 1}`));
           } catch (e) {
-            return undefined;
+            if (!e.toString().includes("Cannot read properties of undefined")) {
+              //return undefined;
+              return ctx.factory.createBinaryExpression(fileName.get, ctx.factory.createToken(_typescript.default.SyntaxKind.PlusToken), ctx.factory.createStringLiteral(`:*:${node.escapedText}`));
+            } else {
+              return undefined
+            }
           }
         }
         const debugVisitor = node => {
@@ -88,12 +100,17 @@ function effectPlugin(program, options) {
           }
           return node;
         };
+        const tryFindSourceFileName = node => {
+          try {
+            return findSource(declaration).fileName
+          } catch { return "" }
+        };
         const optimizeVisitor = node => {
           const visited = _typescript.default.visitEachChild(node, optimizeVisitor, ctx);
           if (_typescript.default.isCallExpression(visited) && visited.arguments.length > 0) {
             const signature = checker.getResolvedSignature(visited);
             const declaration = signature?.declaration;
-            if (declaration && !_typescript.default.isJSDocSignature(declaration) && findSource(declaration).fileName.includes("@fp-ts/data/Function")) {
+            if (declaration && !_typescript.default.isJSDocSignature(declaration) && tryFindSourceFileName(declaration).includes("@fp-ts/data/Function")) {
               if (declaration.name?.getText() === "pipe") {
                 let expr = _typescript.default.visitNode(visited.arguments[0], optimizeVisitor);
                 for (let i = 1; i < visited.arguments.length; i++) {